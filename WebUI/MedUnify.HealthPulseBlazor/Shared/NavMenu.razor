@inject TokenAuthStateProvider AuthenticationService
@inject NavigationManager Navigation

<nav class="navbar navbar-expand-md bg-secondary shadow-lg sticky-top border-bottom" data-bs-theme="dark">
    <div class="container">

        <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" aria-controls="offcanvas" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasLabel">Aperture</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <ul class="navbar-nav flex-grow-1 justify-content-end">

                    @if (isAuthenticated)
                    {
                        <li class="nav-item me-4"><a class="nav-link" href="\Patients">Patients</a></li>
                        <li class="nav-item me-2">

                            <button class="btn btn-danger" type="submit" @onclick="Logout"> Logout </button>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item me-2"><a class="nav-link" href="\login">Login</a></li>
                    }
                </ul>
            </div>
        </div>
    </div>
</nav>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthenticationService.IsAuthenticatedAsync();
    }

    private async Task Logout()
    {
        await AuthenticationService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}
